// Code generated by sqlc. DO NOT EDIT.
// source: expense.sql

package db

import (
	"context"
	"database/sql"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
    description, amount, category_id
) VALUES (
    $1, $2, $3
)
RETURNING id, description, amount, category_id, created_at
`

type CreateExpenseParams struct {
	Description sql.NullString `json:"description"`
	Amount      int64          `json:"amount"`
	CategoryID  int64          `json:"category_id"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense, arg.Description, arg.Amount, arg.CategoryID)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getExpense = `-- name: GetExpense :one
SELECT id, description, amount, category_id, created_at FROM expenses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpense(ctx context.Context, id int64) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, description, amount, category_id, created_at FROM expenses
ORDER BY created_at
`

func (q *Queries) ListExpenses(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :exec
UPDATE expenses
    set description = $2,
    amount = $3,
    category_id = $4
WHERE id = $1
`

type UpdateExpenseParams struct {
	ID          int64          `json:"id"`
	Description sql.NullString `json:"description"`
	Amount      int64          `json:"amount"`
	CategoryID  int64          `json:"category_id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.ExecContext(ctx, updateExpense,
		arg.ID,
		arg.Description,
		arg.Amount,
		arg.CategoryID,
	)
	return err
}
