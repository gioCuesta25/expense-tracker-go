// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    hashed_password, email, full_name
) VALUES (
    $1, $2, $3
)
RETURNING id, hashed_password, email, full_name, created_at
`

type CreateUserParams struct {
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
	FullName       string `json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.HashedPassword, arg.Email, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, hashed_password, email, full_name, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
    set hashed_password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID             uuid.UUID `json:"id"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.HashedPassword)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
    set hashed_password = $2,
    email = $3,
    full_name = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	HashedPassword string    `json:"hashed_password"`
	Email          string    `json:"email"`
	FullName       string    `json:"full_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.HashedPassword,
		arg.Email,
		arg.FullName,
	)
	return err
}
